IRC

Creation d'un serveur : 

1. Creation du Socket du Serveur

Socket() return a int

    int serverSocket = socket(AF_INET, SOCK_STREAM, socketfd);

    AF_INET: It specifies the IPv4 protocol family.
    SOCK_STREAM: It defines that the TCP type socket.
    socketfd : file descripteur du socket

2. Cree l'adresse du Serveur

    sockaddr_in serverAddress;
    sockaddr_in permet de stocker l'adresse du serveur
        sockaddr_in est une structure definie dans <netinet/in.h>
        Elle a plusieurs variables :
            short            sin_family; Permet de choisir le type IP du socket peut comminiquer, pour le IPV4 il faut utiliser AF_INET
            unsigned short   sin_port; Est l'adresse du port de communication 
            struct in_addr   sin_addr; est une structure qui  contient 
                unsigned long s_addr; Permet de stocker des adresse IP
            char             sin_zero[8];
        Si une fonction prend en argument une struct sockaddr* il est possible de cast  sockaddr_in
    1. Bind
    2. Listen(int sockfd, int backlog)
        sockfd = Prend le fd est le transforme en socket passive qui servira a accepter les demandes de connexion entrantes avec Accept
        backlog = définit une longueur maximale jusqu'à laquelle la file des connexions en attente
                Si une nouvelle connexion arrive alors que la file est pleine, le client reçoit une erreur indiquant ECONNREFUSED
    3. Accept(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len)
        La fonction extrait la premiere connexion en attente, 
        cree un nouveau Socket avec le meme protocol et address family du socket en arguments , puis alloue un nouveau fd pour le socket cree
            Socket = un socket cree par socket() et qui est attache avec bind() et a call au moins une fois Listen()
            address = Soit un NULL, soit un pointeur vers une struct sockaddr dans ce cas renvoi une adress du socket de connexion
            address_len = Pointeur vers une socklen_t struct qui en entree qui specifies la taille de la struct sockaddr et en sortie la taille de l'adresse stocker
        Si l'address n'est pas un pointeur NULL, l'address sera stocker dans la struct sockaddr transmisse dans address en argument et la longueur sera stocker dans l'object adress_len
        Si la taille de l'address est plus grade que celle envoyer en argument, l'address sera couper
    !   Si le backlog de listen est vide et que and O_NONBLOCK n'est pas declarer dans le fd du socket,  accept() bloque tant qu'une connexion n'est pas presente
    !   Si O_NONBLOCK est declarer et que le backlog est vide Accept renvoi une erreur 
    4. Close

    int poll(struct pollfd fds[], nfds_t nfds, int timeout);
    1.    struct pollfd
    truct pollfd {
        int   fd;         /* Descripteur de fichier */
        short events;     /* Événements attendus    */
        short revents;    /* Événements détectés    */
    }

    -->    std::map<std::string, Client> map --> declarer
            /*auto client = */ map.get(buffer[1]) -- > verifier si map vide
            map.set(buffer[1], new Client()) --> creer un nouveaux client
    
